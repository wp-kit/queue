#!/usr/bin/env php
<?php
use Bernard\Router\ClassNameRouter;
use Bernard\Consumer;
use Bernard\Queue\RoundRobinQueue;
use WPKit\Queue\AbstractJob;
use Symfony\Component\EventDispatcher\EventDispatcher;
use WPKit\Queue\Queue;
use Roots\WPConfig\Config;

/** WordPress view bootstrapper */
define('WP_CONSOLE', true);
define('ROOT_DIR', getcwd());
putenv('WP_ENV=development');
require_once 'vendor/autoload.php';
require_once 'config/application.php';

$queue = new Queue();

$queueFactory = $queue->getFactory();

$router = new ClassNameRouter();
$router->add(AbstractJob::class, function(AbstractJob $job) use($queue) {
    $job->setQueue($queue);
    $job->handle();
});
$queues = [$queueFactory->create('default')];
$eventDispatcher = new EventDispatcher();
$eventDispatcher->addListener(
    Bernard\BernardEvents::INVOKE,
    function(Bernard\Event\EnvelopeEvent $envelopeEvent) use($queue) {
        $queue->log('Processing: ' . $envelopeEvent->getEnvelope()->getClass()); 
    }
);
$eventDispatcher->addListener(
    Bernard\BernardEvents::ACKNOWLEDGE,
    function(Bernard\Event\EnvelopeEvent $envelopeEvent) use($queue) {
        $queue->log('Processed: ' . $envelopeEvent->getEnvelope()->getClass());
    }
);
$eventDispatcher->addListener(
    Bernard\BernardEvents::REJECT,
    function(Bernard\Event\RejectEnvelopeEvent $envelopeEvent) use($queue) {
        $queue->log('Failed: ' . $envelopeEvent->getEnvelope()->getClass());
    }
);
// Create a Consumer and start the loop.
$consumer = new Consumer($router, $eventDispatcher);
$consumer->consume(new RoundRobinQueue($queues));